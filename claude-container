#!/bin/bash

# container.sh - A script to manage containers
# Supports: build, start, run, exec, stop

set -e
trap 'echo "Error at line $LINENO"; exit 1' ERR

# Set path to the devcontainer directory
CONTAINER_RAW_DIR="https://raw.githubusercontent.com/anthropics/claude-code/refs/heads/main/.devcontainer"

# Ensure local claude directories exist
function ensure_claude_dir {
    echo "Creating claude directories..."
    mkdir -p .claude
    touch .claude/.bash_history
}

function build_container() {
    echo "Using timezone: $TIMEZONE"
    TEMP_DIR=$(mktemp -d)
    curl -s $CONTAINER_RAW_DIR/Dockerfile -o $TEMP_DIR/Dockerfile
    curl -s $CONTAINER_RAW_DIR/init-firewall.sh -o $TEMP_DIR/init-firewall.sh
    podman build -t claude-code --build-arg TD="$TIMEZONE" $TEMP_DIR
}

function build_container_withgo() {
    echo "Using timezone: $TIMEZONE"
    local dir=~/code/github.com/scottrigby/claude-container/withgo
    podman build -t claude-code-go --build-arg TD="$TIMEZONE" $dir
}

# Function to run container with common options
function run_container {
    local mode=$1          # "detached" or "interactive"
    local container_name=$2 # Only used in detached mode
    local cmd=${3:-""}      # Command to run (optional, only used in interactive mode)
    local container_image=${4:-claude-code} # default to claude-code

    # Common environment variables
    local env_vars=(
        "-e CLAUDE_CONFIG_DIR=/home/node/.claude"
        "-e NODE_OPTIONS=--max-old-space-size=4096"
        "-e POWERLEVEL9K_DISABLE_GITSTATUS=true"
    )

    # Common volume mounts
    local volumes=(
        "-v $(pwd)/.claude:/home/node/.claude"
        "-v $(pwd)/.claude/.bash_history:/commandhistory/.bash_history"
        "-v $(pwd):/workspace"
    )

    # Common local args
    local args=(
        "--cap-add=NET_ADMIN"
        "--cap-add=NET_RAW"
    )

    # Build the command based on mode
    if [ "$mode" = "detached" ]; then
        podman run -dit --name "$container_name" ${env_vars[@]} ${volumes[@]} ${args[@]} ${container_image}
    else
        podman run --rm -it ${env_vars[@]} ${volumes[@]} ${args[@]} ${container_image} ${cmd}
    fi
}

function listener() {
    PORT=${1:-8080}

    echo "Starting listener on port $PORT..."
    echo "Press Ctrl+C to stop"
    echo ""

    while true; do
        echo "$(date): Listening on port $PORT..."

        # Listen, capture message, and send response back (closes connection immediately)
        nc -l $PORT | (
            read RECEIVED_MESSAGE
            echo "received"  # This goes back to the client, closing the connection

            if [ -n "$RECEIVED_MESSAGE" ]; then
                echo "$(date): Received message: '$RECEIVED_MESSAGE'" >&2
                echo "$(date): Saying: '$RECEIVED_MESSAGE'" >&2
                say "$RECEIVED_MESSAGE" &
            else
                echo "$(date): Empty message received - saying default" >&2
                say "hello" &
            fi
        )
        echo ""
    done
}

function usage {
    echo "Usage: claude-container [run|help|build|start|exec|stop|rm|run-withgo|build-withgo|listener] [options]"
    echo ""
    echo "Run from within a project directory"
    echo ""
    echo "Simple Commands:"
    echo "  run         Run an interactive container that removes itself on exit (default command: claude)"
    echo "  help        Displays help"
    echo ""
    echo "More Commands:"
    echo "  build       Build the container image"
    echo "  start       Start a detached container (optional env var CONTAINER_NAME. default: parent-dir/current-dir)"
    echo "  exec        Execute a command in a running container (default: zsh)"
    echo "  stop        Stop a running container"
    echo "  rm          Remove a stopped container"
    echo ""
    echo "Custom Container Commands"
    echo "  run-withgo    Run an interactive container with Go tools"
    echo "  build-withgo  Build an interactive container with Go tools"
    echo "  listener      Start a notification listener for Claude (optional port. default: 8080. Ctrl-C to stop)"
    echo ""
    echo "Examples:"
    echo "  - Safe YOLO mode: \`claude-container run claude --dangerously-skip-permissions\`"
    echo "  - With Go: \`claude-container run-withgo claude --dangerously-skip-permissions\`"
    echo ""
    echo "For audio notifications, add this to your CLAUDE.md:"
    echo "  **Task Completion**:"
    echo "  - Send audio notification: \`notify.sh "completion message"\`"
    echo ""
    echo "  **Clarification and Communication**:"
    echo "  - Send notification when clarification needed: \`notify.sh "Need clarification: reason"\`"
    echo ""
}

# Generate container instance name based on parent and current directory
PARENT_DIR=$(basename "$(dirname "$(pwd)")" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')
CURRENT_DIR=$(basename "$(pwd)" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')
CONTAINER_NAME=${CONTAINER_NAME:-"${PARENT_DIR}-${CURRENT_DIR}"}

# Get current timezone in IANA format (e.g. "America/New_York")
TIMEZONE=$(readlink /etc/localtime | sed 's/.*zoneinfo\///')

# Check if at least one argument is provided
if [ -z "$1" ]; then
  usage
fi

command=$1
shift

case $command in
    run)
        echo "Running interactive container..."
        ensure_claude_dir
        build_container

        [ $# -eq 0 ] && CMD=claude || CMD="$@"
        run_container "interactive" "" "$CMD"
        ;;
    run-withgo)
        echo "Running interactive container with Go tools..."
        ensure_claude_dir
        build_container_withgo

        [ $# -eq 0 ] && CMD=claude || CMD="$@"
        run_container "interactive" "" "$CMD" "claude-code-go"
        ;;
    build)
        echo "Building container image..."
        build_container
        ;;
    build-withgo)
        echo "Building container image with Go tools..."
        build_container_withgo
        ;;
    start)
        echo "Starting container..."
        ensure_claude_dir
        run_container "detached" "$CONTAINER_NAME"
        ;;
    exec)
        echo "Executing in container..."
        if [ $# -eq 0 ]; then
            # No command provided, use zsh by default
            podman exec -it "$CONTAINER_NAME" zsh
        else
            # Command provided, use it instead of the default
            podman exec -it "$CONTAINER_NAME" "$@"
        fi
        ;;
    stop)
        echo "Stopping container..."
        podman stop "$CONTAINER_NAME"
        ;;
    rm)
        echo "Removing container..."
        podman rm "$CONTAINER_NAME"
        ;;
    listener)
        listener "$@"
        ;;
    help)
        usage
        ;;
    *)
        echo "Error: Unknown command '$command'"
        usage
        exit 1
        ;;
esac
